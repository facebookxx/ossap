<?php

/**
 * @file
 * Statistics for OpenScholar Single Access Point (OSSAP).
 */

/**
 * Defines the settings variable name for the total child sites count block.
 */
define('OSSAP_SITES_BLOCK_SETTINGS', 'ossap_stats_sites_settings');
define('OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT', 3);
/**
 * Implements hook_menu().
 */
function ossap_stats_menu() {
  $items = array();

  $items['ossap/stats'] = array(
    'title' => t('OpenScholar SAP stats'),
    'page callback' => '_ossap_stats_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ossap/stats.js'] = array(
    'title' => t('OpenScholar Stats'),
    'page callback' => '_ossap_stats_embed_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ossap/stats-uva.js'] = array(
    'title' => t('OpenScholar Stats UVA'),
    'page callback' => '_ossap_stats_uva_embed_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ossap/most-viewed-pages'] = array(
    'title' => t('OpenScholar Board - Most Viewed Pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'ossap_stats_viewed_pages',
    'page arguments' => array(TRUE),
    'access callback' => TRUE,
  );

  $items['ossap/most-visited-sites'] = array(
    'title' => t('OpenScholar Board - Most Visited Sites'),
    'type' => MENU_CALLBACK,
    'page callback' => 'ossap_stats_visited_sites',
    'page arguments' => array(TRUE),
    'access callback' => TRUE,
  );

  $items['ossap/real-time-visitors'] = array(
    'title' => t('OpenScholar Board - Real Time Visitors'),
    'type' => MENU_CALLBACK,
    'page callback' => 'ossap_stats_rt_visitors',
    'page arguments' => array(TRUE),
    'access callback' => TRUE,
  );

  $items['ossap/real-time-visitors-uva'] = array(
    'title' => t('OpenScholar Board - Real Time Visitors UVA'),
    'type' => MENU_CALLBACK,
    'page callback' => 'ossap_stats_rt_visitors_uva',
    'page arguments' => array(TRUE),
    'access callback' => TRUE,
  );

  $items['admin/config/ossap_stats_settings'] = array(
    'title' => 'OSSA - OpenScholar Stats Settings',
    'description' => 'Administer OpenScholar Stats specific settings.',
    'position' => 'left',
    'weight' => -5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ossap_stats_settings_form'),
    'access arguments' => array('administer content'),
  );

  $items['admin/config/ossap_stats_uva_settings'] = array(
    'title' => 'OSSA - OpenScholar Stats UVA Settings',
    'description' => 'Administer OpenScholar Stats UVA specific settings.',
    'position' => 'left',
    'weight' => -5,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ossap_stats_uva_settings_form'),
    'access arguments' => array('administer content'),
  );

  return $items;
}

/**
* ossap_stats_settings_form
* parameters : form_state
* creates an admin form for ossap_stats for admins to
* enter the data for activating Google Analytics
*/
function ossap_stats_settings_form($form_state){
  $form = array();

  $form['ossap_stats_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enter OS Stats settings details here'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['ossap_stats_settings']['ossap_stats_private_key_file_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key Filename'),
    '#default_value' => variable_get('ossap_stats_private_key_file_name',""),
    '#description' => t('Add Private Key File Name here'),
  );

  $form['ossap_stats_settings']['ossap_stats_private_key_path_to_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to private Key'),
    '#required' => TRUE,
    '#description' => t('Add Path to the Private Key here'),
    '#default_value' => variable_get('ossap_stats_private_key_path_to_file',""),
    );

  $form['ossap_stats_settings']['ossap_stats_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Id'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_client_id',""),
    '#description' => t('Add Client Id here'),
  );

  $form['ossap_stats_settings']['ossap_stats_service_gmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Gmail'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_service_gmail',""),
    '#description' => t('Add Service Account Gmail here'),
   );

   $form['ossap_stats_settings']['ossap_stats_analytics_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Analytics Id'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_analytics_id'),
    '#description' => t('Add Analytics Id here'),
   );

  return system_settings_form($form);
}

/**
* ossap_stats_uva_settings_form
* parameters : form_state
* creates an admin form for ossap_stats for admins to
* enter the data for activating Google Analytics
*/
function ossap_stats_uva_settings_form($form_state){
  $form = array();

  $form['ossap_stats_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enter OS Stats UVA settings details here'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['ossap_stats_settings']['ossap_stats_uva_private_key_file_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key Filename'),
    '#default_value' => variable_get('ossap_stats_uva_private_key_file_name',""),
    '#description' => t('Add Private Key File Name here'),
  );

  $form['ossap_stats_settings']['ossap_stats_uva_private_key_path_to_file'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to private Key'),
    '#required' => TRUE,
    '#description' => t('Add Path to the Private Key here'),
    '#default_value' => variable_get('ossap_stats_uva_private_key_path_to_file',""),
    );

  $form['ossap_stats_settings']['ossap_stats_uva_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Id'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_uva_client_id',""),
    '#description' => t('Add Client Id here'),
  );

  $form['ossap_stats_settings']['ossap_stats_uva_service_gmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Gmail'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_uva_service_gmail',""),
    '#description' => t('Add Service Account Gmail here'),
   );

   $form['ossap_stats_settings']['ossap_stats_uva_analytics_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Analytics Id'),
    '#required' => TRUE,
    '#default_value' => variable_get('ossap_stats_uva_analytics_id'),
    '#description' => t('Add Analytics Id here'),
   );

  return system_settings_form($form);
}

/**
* ossap_stats_load_includes
* include all the required files via module_load_include
*/
function ossap_stats_load_includes(){
  module_load_include('php', 'ossap_stats', 'libraries/src/Google_Client');
  module_load_include('php', 'ossap_stats', 'libraries/src/contrib/Google_AnalyticsService');
  module_load_include('inc', 'ossap_stats', 'ossap_stats_credentials');
}

/**
* ossap_stats_visited_sites()
* parameter = $output_json
* default value for the parameter is false
* returns most frequently visited sites
*/
function ossap_stats_visited_sites($output_json = FALSE, $context = 'default'){
  //check if the $output_json is true
  if($output_json) {
    //return output as a json object;
    drupal_json_output(variable_get('visited_sites_in_day',array()));
    drupal_json_output(variable_get('visited_sites_in_week',array()));
    drupal_json_output(variable_get('visited_sites_in_month',array()));
    return NULL;
  }
  //load the includes
  ossap_stats_load_includes();

 //get results from the design_output function by sending the parameter of type = visits
  $results = ossap_stats_design_output('sites', $context);

  //convert all the portals for each interval period to links
  $rows_day = ossap_stats_add_sites_links($results, 'day');
  $rows_week = ossap_stats_add_sites_links($results, 'week');
  $rows_month = ossap_stats_add_sites_links($results, 'month');

  //add all the day for each interval to the $rows array
  $rows = array(
    'day' => $rows_day,
    'week' => $rows_week,
    'month' => $rows_month,
  );
  //return output as an array object;
  return $rows;
}

/**
* ossap_stats_add_sites_links
* parameters : $results, $interval
* $results: array containing links for the $interval period
* returns:  the portals, which are converted to links
* and the count of viewers
*/
function ossap_stats_add_sites_links($results,$interval){
  //portals list which should be avoided in the output
  $portals = array('dev.hwpi.harvard.edu','dev.projects.iq.harvard.edu','dev.scholar.harvard.edu',
                   'hwpi.harvard.edu','projects.iq.harvard.edu', 'scholar.harvard.edu',
                   'staging.hwpi.harvard.edu','staging.projects.iq.harvard.edu','staging.scholar.harvard.edu');
   //retrieve the value for 'rows' key
  $rowsVar = 'rows';

  //check each portal and convert into link
  foreach($results[$interval][$rowsVar] as $result) {
    $domain = $result[0];
    $domainUrl = 'http://'.$domain;
    $userCount = $result[1];

    //check if domain is in the list of portals
    if (!in_array($domain, $portals)){
      //converting each url into a clickable link
      $rows[] = array(l($domain,$domainUrl,array('external' => TRUE)),'('.$userCount.')');
    }
  }

  //return the data(links and views) as an array
  return $rows;
}

/**
* ossap_stats_viewed_pages()
* no parameters. returns most frequently viewed pages
*/
function ossap_stats_viewed_pages($output_json = FALSE, $context = 'default'){

  //return output as a json object from the variable.
  if($output_json) {
    drupal_json_output(variable_get('viewed_pages_day', array()));
    drupal_json_output(variable_get('viewed_pages_week', array()));
    drupal_json_output(variable_get('viewed_pages_month', array()));
    return NULL;
  }

  //load the includes
  ossap_stats_load_includes();

  //get results from the design_output function by sending the parameter of type = pageviews
  $results = ossap_stats_design_output('pages', $context);

  //convert all the portals for each interval period to links
  $rows_day = ossap_stats_add_pages_links($results, 'day');
  $rows_week = ossap_stats_add_pages_links($results, 'week');
  $rows_month = ossap_stats_add_pages_links($results, 'month');

  //add all the day for each interval to the $rows array
  $rows = array(
    'day' => $rows_day,
    'week' => $rows_week,
    'month' => $rows_month,
  );

  //return output as an array object;
  return $rows;
}

/**
* ossap_stats_add_pages_links
* parameters : $results, $interval
* $results: array containing links for the $interval period
* returns: array of (the portals, which are converted to links
* and the count of viewers)
*/
function ossap_stats_add_pages_links($results, $interval){
  //retrieve the value for 'rows' key
  $rowsVar = 'rows';
  //check each portal and convert into link
  foreach($results[$interval][$rowsVar] as $result) {
    $domain = $result[0];
    $pageViews = $result[1];
    $userCount = $result[2];
    $addHttp = "http://";

    if (strlen($pageViews) == 1){
      //add /home to those webpages where users are browsing the home page only
      $pageViews = '/home';
      //converting each url into a clickable link
      //removed the pageViews from urls acc to Ferdi's - request
      $combined_page = l($domain.$pageViews,$addHttp.$domain);
    }
    else{
      //converting each url into a clickable link
      $combined_page = l($domain.$pageViews,$addHttp.$domain.$pageViews);
    }
      $rows[] = array($combined_page,'('.$userCount.')');
  }

  //return output as an array object;
  return $rows;
}

/**
* ossap_stats_rt_visitors()
* no parameters. returns real time visitors
*/
function ossap_stats_rt_visitors($output_json = FALSE){
  $rt_stats = variable_get('rt_visitors', array());
  // If it has been more that 5 seconds go get new stats from google.
  if(!count($rt_stats) || !is_array($rt_stats) || intval(key($rt_stats)) < (time() - 15)) {
    try{
      //load the includes
      ossap_stats_load_includes();
      //get results from the ossap_stats_return_users function
      $results = ossap_stats_return_users();
    } catch (Google_ServiceException $e) {
      //We are over our request limit.... or somthing.
      $result = FALSE;
      // Don't try back again for 30 minutes, keep the same value.
      $rt_stats = array_merge(array(" ".(time()+1800) => current($rt_stats)),$rt_stats);
      variable_set('rt_visitors', $rt_stats);
    }

    if(is_array($results)) {
      $data = $results['rows'][0][0];
      $rt_stats = array_merge(array(" ".time() => $data),$rt_stats);
      variable_set('rt_visitors', array_slice($rt_stats, 0, 15, true));
    }
  }

  $rt_stats_week = variable_get('rt_visitors_week', array());
  $rt_stats_month = variable_get('rt_visitors_month', array());
  $rt_pv_week = variable_get('rt_pageview_week', array());
  $rt_pv_month = variable_get('rt_pageview_month', array());
  // If it has been more than a day go get new stats from google.
  if(!count($rt_stats_week) || !is_array($rt_stats_week) || intval(key($rt_stats_week)) < (time() - 86400)) {
    try{
      //load the includes
      ossap_stats_load_includes();
      //get results from the ossap_stats_return_users function
      $results = ossap_stats_design_output('sessions');
    } catch (Google_ServiceException $e) {
      //We are over our request limit.... or somthing.
      $result = FALSE;
      // Don't try back again for 4 hours, keep the same value.
      $rt_stats_week = array_merge(array(" ".(time()+14400) => current($rt_stats_week)),$rt_stats_week);
      variable_set('rt_visitors_week', $rt_stats_week);
      $rt_stats_month = array_merge(array(" ".(time()+14400) => current($rt_stats_month)),$rt_stats_month);
      variable_set('rt_visitors_month', $rt_stats_month);
      $rt_pv_week = array_merge(array(" ".(time()+14400) => current($rt_pv_week)),$rt_pv_week);
      variable_set('rt_pageview_week', $rt_pv_week);
      $rt_pv_month = array_merge(array(" ".(time()+14400) => current($rt_pv_month)),$rt_pv_month);
      variable_set('rt_pageview_month', $rt_pv_month);
    }
    if(is_array($results)) {
      $rt_stats_week = array_merge(array(" ".time() => $results['week']['rows'][0][0]),$rt_stats_week);
      variable_set('rt_visitors_week', array_slice($rt_stats_week, 0, 15, true));
      $rt_stats_month = array_merge(array(" ".time() => $results['month']['rows'][0][0]),$rt_stats_month);
      variable_set('rt_visitors_month', array_slice($rt_stats_month, 0, 15, true));
      $rt_pv_week = array_merge(array(" ".time() => $results['week']['rows'][0][1]),$rt_pv_week);
      variable_set('rt_pageview_week', array_slice($rt_pv_week, 0, 15, true));
      $rt_pv_month = array_merge(array(" ".time() => $results['month']['rows'][0][1]),$rt_pv_month);
      variable_set('rt_pageview_month', array_slice($rt_pv_month, 0, 15, true));
    }
  }


   //return output as a json object;
   if($output_json) {
     drupal_page_is_cacheable(FALSE);
     drupal_json_output(array(current($rt_stats),current($rt_stats_week),current($rt_stats_month),current($rt_pv_week),current($rt_pv_month)));
     return NULL;
   }

   //return output as an array object;
   return array($rt_stats, $rt_stats_week, $rt_stats_month, $rt_pv_week, $rt_pv_month);
}

/**
 * ossap_stats_rt_visitors_uva()
 * no parameters. returns real time visitors
 */
function ossap_stats_rt_visitors_uva($output_json = FALSE){
  $rt_stats = variable_get('rt_visitors_uva', array());
  // If it has been more that 5 seconds go get new stats from google.
  if(!count($rt_stats) || !is_array($rt_stats) || intval(key($rt_stats)) < (time() - 15)) {
    try{
      //load the includes
      ossap_stats_load_includes();
      //get results from the ossap_stats_return_users function
      $results = ossap_stats_return_users('uva');
    } catch (Google_ServiceException $e) {
      //We are over our request limit.... or somthing.
      $result = FALSE;
      // Don't try back again for 30 minutes, keep the same value.
      $rt_stats = array_merge(array(" ".(time()+1800) => current($rt_stats)),$rt_stats);
      variable_set('rt_visitors_uva', $rt_stats);
    }

    if(is_array($results)) {
      $data = $results['rows'][0][0] ?? "0";
      $rt_stats = array_merge(array(" ".time() => $data), $rt_stats);
      variable_set('rt_visitors_uva', array_slice($rt_stats, 0, 15, true));
    }
  }

  $rt_stats_week = variable_get('rt_visitors_uva_week', array());
  $rt_stats_month = variable_get('rt_visitors_uva_month', array());
  $rt_pv_week = variable_get('rt_pageview_uva_week', array());
  $rt_pv_month = variable_get('rt_pageview_uva_month', array());
  // If it has been more than a day go get new stats from google.
  if(!count($rt_stats_week) || !is_array($rt_stats_week) || intval(key($rt_stats_week)) < (time() - 86400)) {
    try{
      //load the includes
      ossap_stats_load_includes();
      //get results from the ossap_stats_return_users function
      $results = ossap_stats_design_output('sessions', 'uva');
    } catch (Google_ServiceException $e) {
      //We are over our request limit.... or somthing.
      $result = FALSE;
      // Don't try back again for 4 hours, keep the same value.
      $rt_stats_week = array_merge(array(" ".(time()+14400) => current($rt_stats_week)),$rt_stats_week);
      variable_set('rt_visitors_uva_week', $rt_stats_week);
      $rt_stats_month = array_merge(array(" ".(time()+14400) => current($rt_stats_month)),$rt_stats_month);
      variable_set('rt_visitors_uva_month', $rt_stats_month);
      $rt_pv_week = array_merge(array(" ".(time()+14400) => current($rt_pv_week)),$rt_pv_week);
      variable_set('rt_pageview_uva_week', $rt_pv_week);
      $rt_pv_month = array_merge(array(" ".(time()+14400) => current($rt_pv_month)),$rt_pv_month);
      variable_set('rt_pageview_uva_month', $rt_pv_month);
    }
    if(is_array($results)) {
      $rt_stats_week = array_merge(array(" ".time() => $results['week']['rows'][0][0]),$rt_stats_week);
      variable_set('rt_visitors_uva_week', array_slice($rt_stats_week, 0, 15, true));
      $rt_stats_month = array_merge(array(" ".time() => $results['month']['rows'][0][0]),$rt_stats_month);
      variable_set('rt_visitors_uva_month', array_slice($rt_stats_month, 0, 15, true));
      $rt_pv_week = array_merge(array(" ".time() => $results['week']['rows'][0][1]),$rt_pv_week);
      variable_set('rt_pageview_uva_week', array_slice($rt_pv_week, 0, 15, true));
      $rt_pv_month = array_merge(array(" ".time() => $results['month']['rows'][0][1]),$rt_pv_month);
      variable_set('rt_pageview_uva_month', array_slice($rt_pv_month, 0, 15, true));
    }
  }


  //return output as a json object;
  if($output_json) {
    drupal_page_is_cacheable(FALSE);
    drupal_json_output(array(current($rt_stats),current($rt_stats_week),current($rt_stats_month),current($rt_pv_week),current($rt_pv_month)));
    return NULL;
  }

  //return output as an array object;
  return array($rt_stats, $rt_stats_week, $rt_stats_month, $rt_pv_week, $rt_pv_month);
}

/**
 * Implements hook_theme().
 */
function ossap_stats_theme() {
  return array(
    'ossap_stats_embed_js' => array(
      'variables' => array(
        'aggregates' => NULL,
        'realtime_visitors_url' => NULL,
        'stats_js_path' => NULL,
        'os_version' => NULL,
        'messages' => NULL,
        'getsatisfaction' => NULL,
        'visited_sites_in_day' => NULL,
        'visited_sites_in_week' => NULL,
        'visited_sites_in_month' => NULL,
        'viewed_pages_in_day' => NULL,
        'viewed_pages_in_week' => NULL,
        'viewed_pages_in_month' => NULL,
        'rt_visitors' => NULL,
        'rt_visitors_week' => NULL,
        'rt_visitors_month' => NULL,
        'rt_pageview_week' => NULL,
        'rt_pageview_month' => NULL,
      ),
      'template' => 'ossap-stats-embed-js',
    ),
  );
}

/**
 * Page callback; exposes all OSSAP stats in one JSON object.
 */
function _ossap_stats_page() {
  // Prepares a safe version of the child_domains variable to expose.
  $child_domains = variable_get('ossap_child_domains', array());
  foreach ($child_domains as $url => $info) {
    if (isset($info['restuser'])) {
      unset($child_domains[$url]['restuser']);
    }
  }

  // Prepares the data array to render to the page as JSON.
  $data = array(
    'success' => TRUE,
    'child_domains' => $child_domains,
    'aggregates' => variable_get('ossap_stats_aggregates', array()),
    'os_version' => _ossap_stats_get_os_version(),
  );

  // Adds GetSatisfaction statistics if any statistics exist.
  $getsatisfaction = variable_get('ossap_stats_getsatisfaction', NULL);
  if ($getsatisfaction !== NULL) {
    $data['getsatisfaction'] = $getsatisfaction;
  }

  // Adds activity statistics if any statistics exist.
  $activity = variable_get('ossap_stats_activity', NULL);
  if ($activity !== NULL) {
    $data['activity'] = $activity;
  }

  // Add most visited sites statistics if any statistics exist.
  // day
  $most_visited_sites_in_day = variable_get('visited_sites_in_day', NULL);
  if ($most_visited_sites_in_day !== NULL) {
    $data['visited_sites_in_day'] = $most_visited_sites_in_day;
  }
  // week
  $most_visited_sites_in_week = variable_get('visited_sites_in_week', NULL);
  if ($most_visited_sites_in_week !== NULL) {
    $data['visited_sites_in_week'] = $most_visited_sites_in_week;
  }
  // month
  $most_visited_sites_in_month = variable_get('visited_sites_in_month', NULL);
  if ($most_visited_sites_in_month !== NULL) {
    $data['visited_sites_in_month'] = $most_visited_sites_in_month;
  }

  // Add most viewed pages statistics if any statistics exist.
  // day
  $most_viewed_pages_in_day = variable_get('viewed_pages_in_day', NULL);
  if ($most_viewed_pages_in_day !== NULL) {
    $data['viewed_pages_in_day'] = $most_viewed_pages_in_day;
  }
  // week
  $most_viewed_pages_in_week = variable_get('viewed_pages_in_week', NULL);
  if ($most_viewed_pages_in_week !== NULL) {
    $data['viewed_pages_in_week'] = $most_viewed_pages_in_week;
  }
  // month
  $most_viewed_pages_in_month = variable_get('viewed_pages_in_month', NULL);
  if ($most_viewed_pages_in_month !== NULL) {
    $data['viewed_pages_in_month'] = $most_viewed_pages_in_month;
  }

  // Add real time visitors statistics if any statistics exist.
  $real_time_visitors = current(variable_get('rt_visitors', array()));
  if ($real_time_visitors !== NULL) {
    $data['rt_visitors'] = $real_time_visitors;
  }

  drupal_json_output($data);
}

/**
 * Page callback; formats and displays the embed code to paste on any site.
 */
function _ossap_stats_embed_js($stat) {
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  $aggregates = variable_get('ossap_stats_aggregates', array());

  // Prepares any available GetSatisfaction statistics.
  $getsatisfaction = variable_get('ossap_stats_getsatisfaction', array());

  // Prepares any available Most visited statistics.
  $most_visited_sites_in_day = variable_get('visited_sites_in_day', array());
  $most_visited_sites_in_week = variable_get('visited_sites_in_week', array());
  $most_visited_sites_in_month = variable_get('visited_sites_in_month', array());

  // Prepares any available Most viewed statistics.
  $most_viewed_pages_in_day = variable_get('viewed_pages_in_day', array());
  $most_viewed_pages_in_week = variable_get('viewed_pages_in_week', array());
  $most_viewed_pages_in_month = variable_get('viewed_pages_in_month', array());

  // Prepares any available real time visitors statistics.
  $real_time_visitors = current(variable_get('rt_visitors', array()));
  $real_time_week = current(variable_get('rt_visitors_week', array()));
  $real_time_month = current(variable_get('rt_visitors_month', array()));
  $pv_time_week = current(variable_get('rt_pageview_week', array()));
  $pv_time_month = current(variable_get('rt_pageview_month', array()));

  // Prepares the activity messages.
  $messages = '';
  $activity = variable_get('ossap_stats_activity', array());
  if (isset($activity['messages']) && !empty($activity['messages'])) {
    $count = variable_get('ossap_stats_embed_message_count', OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT);
    $items = array_slice($activity['messages'], 0, $count);
    $build = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array('class' => array('ossap-stats-embed-messages')),
    );
    $messages = json_encode(drupal_render($build));
  }
  $variables = array(
    'aggregates' => $aggregates,
    'realtime_visitors_url' => '/ossap/real-time-visitors',
    'stats_js_path' => 'ossap/stats.js',
    'os_version' => _ossap_stats_get_os_version(),
    'messages' => $messages,
    'getsatisfaction' => $getsatisfaction,
    //added variables for most_visited_sites and most_viewed_pages and real_time_visitors
    'visited_sites_in_day' => $most_visited_sites_in_day,
    'visited_sites_in_week' => $most_visited_sites_in_week,
    'visited_sites_in_month' => $most_visited_sites_in_month,
    'viewed_pages_in_day' => $most_viewed_pages_in_day,
    'viewed_pages_in_week' => $most_viewed_pages_in_week,
    'viewed_pages_in_month' => $most_viewed_pages_in_month,
    'rt_visitors' => $real_time_visitors,
    'rt_visitors_week' => $real_time_week,
    'rt_visitors_month' => $real_time_month,
    'rt_pageview_week' => $pv_time_week,
    'rt_pageview_month' => $pv_time_month,
  );
   print theme('ossap_stats_embed_js', $variables);
   exit;
}

/**
 * Page callback; formats and displays the embed code to paste on any site.
 */
function _ossap_stats_uva_embed_js($stat) {
  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  $aggregates = variable_get('ossap_stats_uva_aggregates', array());

  // Prepares any available GetSatisfaction statistics.
  $getsatisfaction = variable_get('ossap_stats_getsatisfaction', array());

  // Prepares any available Most visited statistics.
  $most_visited_sites_in_day = variable_get('visited_sites_in_day_uva', array());
  $most_visited_sites_in_week = variable_get('visited_sites_in_week_uva', array());
  $most_visited_sites_in_month = variable_get('visited_sites_in_month_uva', array());

  // Prepares any available Most viewed statistics.
  $most_viewed_pages_in_day = variable_get('viewed_pages_in_day_uva', array());
  $most_viewed_pages_in_week = variable_get('viewed_pages_in_week_uva', array());
  $most_viewed_pages_in_month = variable_get('viewed_pages_in_month_uva', array());

  // Prepares any available real time visitors statistics.
  $real_time_visitors = current(variable_get('rt_visitors_uva', array()));
  $real_time_week = current(variable_get('rt_visitors_uva_week', array()));
  $real_time_month = current(variable_get('rt_visitors_uva_month', array()));
  $pv_time_week = current(variable_get('rt_pageview_uva_week', array()));
  $pv_time_month = current(variable_get('rt_pageview_uva_month', array()));

  // Prepares the activity messages.
  $messages = '';
  $activity = variable_get('ossap_stats_uva_activity', array());
  if (isset($activity['messages']) && !empty($activity['messages'])) {
    $count = variable_get('ossap_stats_embed_message_count', OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT);
    $items = array_slice($activity['messages'], 0, $count);
    $build = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#attributes' => array('class' => array('ossap-stats-embed-messages')),
    );
    $messages = json_encode(drupal_render($build));
  }
  $variables = array(
    'aggregates' => $aggregates,
    'realtime_visitors_url' => 'https://osops.d7.theopenscholar.com/ossap/real-time-visitors-uva',
    'stats_js_path' => 'https://osops.d7.theopenscholar.com/ossap/stats-uva.js',
    'os_version' => _ossap_stats_get_os_version(),
    'messages' => $messages,
    'getsatisfaction' => $getsatisfaction,
    //added variables for most_visited_sites and most_viewed_pages and real_time_visitors
    'visited_sites_in_day' => $most_visited_sites_in_day,
    'visited_sites_in_week' => $most_visited_sites_in_week,
    'visited_sites_in_month' => $most_visited_sites_in_month,
    'viewed_pages_in_day' => $most_viewed_pages_in_day,
    'viewed_pages_in_week' => $most_viewed_pages_in_week,
    'viewed_pages_in_month' => $most_viewed_pages_in_month,
    'rt_visitors' => $real_time_visitors,
    'rt_visitors_week' => $real_time_week,
    'rt_visitors_month' => $real_time_month,
    'rt_pageview_week' => $pv_time_week,
    'rt_pageview_month' => $pv_time_month,
  );
   print theme('ossap_stats_embed_js', $variables);
   exit;
}

/**
 * Implements hook_cron_queue_info().
 */
function ossap_stats_cron_queue_info() {
  $queue = array();

  $queue['ossap_stats_queue'] = array(
    'worker callback' => 'ossap_stats_block_worker',
  );

  return $queue;
}

/**
 * Implements hook_cron().
 */
function ossap_stats_cron() {
  $queue = DrupalQueue::get('ossap_stats_queue');
  $queue->createQueue();
  // Add an array key as a new cron job key
  $stats = array('sites', 'getsatisfaction', 'activity', 'visited_sites', 'viewed_pages');
  foreach ($stats as $stat) {
    $queue->createItem($stat);
  }
}

/**
 * Cron worker callback for OSSAP stats.
 */
function ossap_stats_block_worker($stat = '') {
  $uva_domains = [
    'uva.theopenscholar.com' => array(
      'types' => array(
        'personal',
      ),
      'domains' => array(
        'uva.theopenscholar.com',
      ),
    ),
  ];
  switch ($stat) {
    case 'sites':
      ossap_stats_sites_cron_worker();
      ossap_stats_sites_cron_worker($uva_domains, 'ossap_stats_uva_aggregates');
      break;
    case 'getsatisfaction':
      ossap_stats_getsatisfaction_cron_worker();
      break;
    case 'activity':
      ossap_stats_activity_cron_worker();
      ossap_stats_activity_cron_worker($uva_domains, 'ossap_stats_uva_activity');
      break;
    // Add a case statement in the cron worker function for
    //for most_visited_sites, most_viewed_pages and real_time visitors
    case 'visited_sites':
      ossap_stats_most_visited_sites_cron_worker();
      ossap_stats_most_visited_sites_cron_worker('uva');
      break;
    case 'viewed_pages':
      ossap_stats_most_viewed_pages_cron_worker();
      ossap_stats_most_viewed_pages_cron_worker('uva');
      break;
    /*
    case 'rt_visitors':
      ossap_stats_real_time_visitors_cron_worker();
      break;
    */
  }
}

/**
 * Cron worker callback for OSSAP most_visited_sites
 *
 * @param string $context
 *   Allow multiple source (can be default|uva)
 */
function ossap_stats_most_visited_sites_cron_worker($context = 'default'){
  $function = 'ossap_stats_visited_sites';
  if (!function_exists($function)) {
    return;
  }

  $most_visited_sites = $function(FALSE, $context);
  if (!empty($most_visited_sites)) {
    switch ($context) {
      case 'uva':
        variable_set('visited_sites_in_day_uva', $most_visited_sites['day']);
        variable_set('visited_sites_in_week_uva', $most_visited_sites['week']);
        variable_set('visited_sites_in_month_uva', $most_visited_sites['month']);
        break;
      default:
        variable_set('visited_sites_in_day', $most_visited_sites['day']);
        variable_set('visited_sites_in_week', $most_visited_sites['week']);
        variable_set('visited_sites_in_month', $most_visited_sites['month']);
        break;
    }
  }
}

/**
 * Cron worker callback for OSSAP most_viewed_sites
 */
function ossap_stats_most_viewed_pages_cron_worker($context = 'default'){
  $function = 'ossap_stats_viewed_pages';
  if (!function_exists($function)) {
    return;
  }

  $most_viewed_pages = $function(FALSE, $context);
  if (!empty($most_viewed_pages)) {
    switch ($context) {
      case 'uva':
        variable_set('viewed_pages_in_day_uva', $most_viewed_pages['day']);
        variable_set('viewed_pages_in_week_uva', $most_viewed_pages['week']);
        variable_set('viewed_pages_in_month_uva', $most_viewed_pages['month']);
        break;
      default:
        variable_set('viewed_pages_in_day', $most_viewed_pages['day']);
        variable_set('viewed_pages_in_week', $most_viewed_pages['week']);
        variable_set('viewed_pages_in_month', $most_viewed_pages['month']);
        break;
    }
  }
}

/**
 * Cron worker callback for OSSAP real_time_users
 */
/*
function ossap_stats_real_time_visitors_cron_worker(){
  $function = 'ossap_stats_rt_visitors';
  if (!function_exists($function)) {
    return;
  }

  $real_time_visitors_stats = $function();
  if (!empty($real_time_visitors_stats)) {
    variable_set('rt_visitors', $real_time_visitors_stats);
  }
}
*/

/**
 * Cron worker callback for get_satisfaction
 */
function ossap_stats_getsatisfaction_cron_worker() {
  $function = 'getsatisfaction_integration_stats';
  if (!function_exists($function)) {
    return;
  }

  $getsatisfaction_stats = $function();
  if (!empty($getsatisfaction_stats)) {
    variable_set('ossap_stats_getsatisfaction', $getsatisfaction_stats);
  }
}

/**
 * Cron queue worker to aggregate latest status messages.
 */
function ossap_stats_activity_cron_worker($servers = [], $variable_name = 'ossap_stats_activity') {
  $activity = array();

  if (empty($servers)) {
    $servers = variable_get('ossap_child_domains', array());
  }
  $domains = array_keys($servers);
  $options = array();
  foreach ($domains as $domain) {
    $url = "http://$domain/activity.json";
    $result = drupal_http_request($url, $options);
    if (isset($result->data)) {
      $data = drupal_json_decode($result->data);
      foreach ($data['messages'] as $key => $info) {
        $time = _ossap_stats_time_markup($info['timestamp']);

        $activity['messages'][$key] = array(
          'data' => $time . $info['markup'],
        );
      }
    }
  }

  if (!empty($activity)) {
    if (!empty($activity['messages'])) {
      // Sorts the activity messages first by timestamp desc, then by nid desc.
      ksort($activity['messages'], SORT_NUMERIC);
      $activity['messages'] = array_reverse($activity['messages']);
    }
    variable_set($variable_name, $activity);
  }
}

/**
 * Cron queue worker for the ossap_stats_sites block.
 *
 * Invokes drupal_http_request on each child server to get total sites stats.
 */
function ossap_stats_sites_cron_worker($servers = [], $variable_name = 'ossap_stats_aggregates') {
  $aggregates = array();

  $stat_keys = array_keys(_os_stats_queries());
  $unsummable = array('filesize');
  if (empty($servers)) {
    $servers = variable_get('ossap_child_domains', array());
  }
  $domains = array_keys($servers);
  $options = array();
  foreach ($domains as $domain) {
    $url = "http://$domain/stats";
    $result = drupal_http_request($url, $options);
    if (isset($result->data)) {
      $data = drupal_json_decode($result->data);
      foreach ($stat_keys as $stat) {
        if (in_array($stat, $unsummable)) {
          continue;
        }
        if (isset($data[$stat]['value'])) {
          if(!isset($aggregates[$stat])){
            $aggregates[$stat] = 0;
          }
          $aggregates[$stat] += $data[$stat]['value'];
        }
      }
    }
  }

  if (count($aggregates)) {
    variable_set($variable_name, $aggregates);
  }
}

/**
 * Gets current OpenScholar release version string, like "3.10".
 */
function _ossap_stats_get_os_version() {
  // Parses the info file to get os_version.
  $info = system_get_info('module','openscholar');

  // Removes the Drupal major version number prefix (i.e. "7.x-").
  $os_version = substr($info['os_version'], 4);

  return $os_version;
}

/**
 * Implements hook_form_FORM_ID_alter() for os_settings_form.
 *
 * Allows admins to set the global Google Analytics ID and sitewide options.
 */
function ossap_stats_form_os_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['ossap_stats'] = array(
    '#type' => 'fieldset',
    '#title' => t('OSSAP Stats'),
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $prefix = '<h4>' . t('Embeddable stats') . '</h4><p class="description">';
  $prefix .= t('These settings affect the information available in the <a href="!href">OSSAP Stats embed JS</a>.', array('!href' => url('ossap/stats.js'))) . '</p>';
  $form['ossap_stats']['ossap_stats_embed_message_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Activity message count'),
    '#prefix' => $prefix,
    '#weight' => 15,
    '#size' => 6,
    '#maxlength' => 255,
    '#default_value' => variable_get('ossap_stats_embed_message_count', OSSAP_STATS_EMBED_MESSAGE_COUNT_DEFAULT),
    '#description' => t('(Integer) How many recent activity messages to display.'),
  );
}

/**
 * Returns an HTML5 semantic time tag with datetime, title and time ago text.
 *
 * @see http://microformats.org/wiki/abbr-datetime-pattern
 */
function _ossap_stats_time_markup($timestamp) {
  $markup = '';

  if (!empty($timestamp) && is_numeric($timestamp)) {
    $time = format_interval(time() - $timestamp);
    $datetime = strftime('%Y-%m-%d %H:%M:%S%z', $timestamp);
    $title = format_date($timestamp);
    $time_ago = t('@time ago', array('@time' => $time));
    $build = array(
      '#theme' => 'html_tag',
      '#tag' => 'time',
      '#attributes' => array(
        'class' => array(
          'time',
        ),
        'datetime' => $datetime,
        'title' => $title,
      ),
      '#value' => $time_ago,
    );
    $markup = drupal_render($build);
  }

  return $markup;
}

/**
 * Get GoogleAnalytics credentials.
 *
 * @param string $context
 *   Allow handle multiple credentials.
 *
 * @return array
 */
function ossap_stats_get_ga_credentials($context = 'default') {
  $variable_map = [
    'default' => [
      'service_gmail' => 'ossap_stats_service_gmail',
      'client_id' => 'ossap_stats_client_id',
      'private_key_file_name' => 'ossap_stats_private_key_file_name',
      'private_key_path_to_file' => 'ossap_stats_private_key_path_to_file',
    ],
    'uva' => [
      'service_gmail' => 'ossap_stats_uva_service_gmail',
      'client_id' => 'ossap_stats_uva_client_id',
      'private_key_file_name' => 'ossap_stats_uva_private_key_file_name',
      'private_key_path_to_file' => 'ossap_stats_uva_private_key_path_to_file',
    ],
  ];
  return [
    'service_gmail' => variable_get($variable_map[$context]['service_gmail']),
    'client_id' => variable_get($variable_map[$context]['client_id']),
    'private_key_file_name' => variable_get($variable_map[$context]['private_key_file_name']),
    'private_key_path_to_file' => variable_get($variable_map[$context]['private_key_path_to_file']),
  ];
}
